git init 初始化版本库
git add <filename> 添加文件到版本库暂存区(called stage or index)
git commit 把暂存区的内容提交到当前分支（默认分支是master）

”暂存区就像购物车，没到付款的时候你都不确定购物车里的东西全部都是要的。。。每拿一件商品就付一次款。。。那才麻烦大了。“

git diff [head -- filename]查看工作区和版本库的不同 （git add 之前执行）
git diff --cached 	对比暂存区和版本库的不同 （git add 之后执行）

git status 查看当前版本库状态
git log 查看提交历史
git reflog 查看命令历史

git checkout -- file可以丢弃工作区的修改：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态.
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
git reset --hard head^  返回上一个版本    head^^ 返回上上个版本   head~100   往上100个版本

git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

对于文件 myfile.txt

① 修改后 未add（添加到暂存区） 需要撤销修改时：
        git checkout -- myfile.txt 或 手动删除工作区修改
        工作区 ： clean  暂存区： clean
② 修改后 add了（未commit） 再次修改文件  要撤销第二次修改时：
        git checkout -- myfile.txt (将暂存区恢复到工作区)
        暂存区有第一次的修改需要commit
③ 修改后 add了（未commit），需要撤销修改时：
        git reset HEAD myfile.txt (将暂存区修改删除)
        此时工作区的修改还未撤销
        git checkout -- myfile.txt (撤销工作区修改)
④ 修改后 add并commit了，需要撤销修改时：
        git reset --hard HEAD^  (版本回退)**
		
		

一、rm只删除工作区信息；
使用 git checkout -- file即可恢复；

二、git rm 删除工作区和stage信息；
1、使用git reset HEAD -- file即可恢复；

2、恢复步骤：
1）先使用git reset HEAD -- file从master中把已删除信息copy到到stage区；
2）再使用git checkout -- file从stage区把已删除信息copy到工作区。over！！！
3）这时你就看到删除的文件又回来啦。啦啦啦！

三、git commit －m “file”删除工作区，stage和master信息；
1、使用git reset --hard HEAD^即可恢复。

2、恢复步骤：
1）先使用git reset --hard HEAD^从master回收处恢复到master中；
2）再使用git reset HEAD -- file从master中把已删除信息copy到到stage区；
3）最后，使用git checkout -- file从stage区把已删除信息copy到工作区。
4）这时你就看到删除的文件又回来啦。啦啦啦！


要关联一个远程库，使用命令git remote add origin git@github.com:thengor/learngit.git；
也可通过 HTTPS 方式：git remote add origin https://github.com/thengor/learngit.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

git clone "SSH/HTTPS url" 克隆远程仓库

git checkout -b "branch name" 创建并切换分支 = git branch "branch name" + git checkout "branch name"
git checkout master 切换到主分支， dev分支提交的内容不见， 需要merge到master - git merge dev
git merge命令用于合并指定分支到当前分支
git branch -d dev  删除分支

merge 有冲突， 用git status 查看有冲突的文件，手动解决后，git add & git commit， 
用git log --graph [--pretty=oneline --abbrev-commit] 可以看到分支合并图。



