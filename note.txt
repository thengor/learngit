git init 初始化版本库
git add <filename> 添加文件到版本库暂存区(called stage or index)
git commit 把暂存区的内容提交到当前分支（默认分支是master）

”暂存区就像购物车，没到付款的时候你都不确定购物车里的东西全部都是要的。。。每拿一件商品就付一次款。。。那才麻烦大了。“

git diff [head -- filename]查看工作区和版本库的不同 （git add 之前执行）
git diff --cached 	对比暂存区和版本库的不同 （git add 之后执行）

git status 查看当前版本库状态
git log 查看提交历史
git reflog 查看命令历史

git checkout -- file可以丢弃工作区的修改：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态.
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
git reset --hard head^  返回上一个版本    head^^ 返回上上个版本   head~100   往上100个版本

git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

